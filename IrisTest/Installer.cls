Class IrisTest.Installer
{

/*
XData setup
{
<Manifest>
  <Default Name="Namespace" Value="IRISAPP"/>
  <Default Name="database" Value="irisapp"/>
  
  <Namespace Name="${Namespace}" Code="${Namespace}" Data="${Namespace}" Create="yes" Ensemble="no">

    <Configuration>
      <Database Name="${Namespace}" Dir="${mgrdir}${database}/data" Create="yes" Resource="%DB_${Namespace}"/>
    </Configuration>
  </Namespace>
</Manifest>
}
*/
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
  #; Let XGL document generate code for this method. 
  ;Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "setup")
  Do ..SetupCLI()
}

/// This setup the ZIRISTEST  cli command
/// ZIRISTEST "-id=89,-format=HTML"
ClassMethod SetupCLI()
{
	Set routineName = "%ZLANGC00.MAC"
	If ##class(%Routine).%ExistsId(routineName) {
		Set routine = ##class(%Routine).%OpenId(routineName)
	}
	Else {
		Set routine = ##class(%Routine).%OpenId(routineName)
	}
	;
	Do routine.MoveToEnd()
	Do routine.WriteLine(" ;Generated by IrisTest.Installer : Start")
	Do routine.WriteLine(" //sample : ZIRISTEST ""-i=89 -o=HTML""")
	Do routine.WriteLine(" //sample : ZIRISTEST ""--id=89 --output=HTML,ALLURE""")
	Do routine.WriteLine("ZIRISTEST(pArgs...)")
	Do routine.WriteLine(" New (pArgs)")
	Do routine.WriteLine(" If '##class(%Library.ClassDefinition).%ExistsId(""IrisTest.Report"") {")
	Do routine.WriteLine("     Write !, ""IrisTest package not available in the current namespace""")
	Do routine.WriteLine("     Return ")
	Do routine.WriteLine(" }")
	Do routine.WriteLine(" Set pArgs(1) = $ZCVT($G(pArgs(1)),""U"")")
	Do routine.WriteLine(" If pArgs(1)=""""!(pArgs(1)=""SHELL"") {")
	Do routine.WriteLine("    Do ##class(IrisTest.Main).Shell()")
	Do routine.WriteLine("    Return")
	Do routine.WriteLine(" }")
	Do routine.WriteLine(" If pArgs(1)?1(1""-H"",1""--HELP"") Do ##class(IrisTest.Main).HELPMSG() Quit")
	Do routine.WriteLine(" Set cmdList = $LFS(pArgs(1),"" "")")
	Do routine.WriteLine(" Set ptr = 0")
	Do routine.WriteLine(" While $ListNext(cmdList,ptr,cmd) {")
	Do routine.WriteLine(" 	 Set:cmd?1""-"".E flgs($TR($P(cmd,""=""),""-""))=$P(cmd,""="",2)")
	Do routine.WriteLine(" }")
	Do routine.WriteLine(" Set id = $Get(flgs(""ID""), $Get(flgs(""I""), """"))")
	Do routine.WriteLine(" Set format = $LFS($Get(flgs(""OUTPUT""), $Get(flgs(""O""), """")))")
	Do routine.WriteLine(" Set fileDir = $Get(flgs(""OUTPUTDIR""), $Get(flgs(""D""), """"))")
	Do routine.WriteLine(" If id="""" Write !, ""Unit testId flag is missing"" Quit  ")
	Do routine.WriteLine(" If format="""" Write !, ""Atleast one output format is required"" Quit  ")
	Do routine.WriteLine(" Do ##class(IrisTest.Report).Run(id, format, fileDir)")
	Do routine.WriteLine(" Return 1")
	Do routine.WriteLine(" ;Generated by IrisTest.Installer : End")
	Do routine.WriteLine(" ;")
	Set st= routine.%Save()
	Do routine.Compile()
}

}
